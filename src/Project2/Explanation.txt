Για να βρούμε το Maximum Subarray Sum από ένα array, θα μπορούσαμε να κάνουμε ένα
nested loop, να παίρνουμε το currentSum και να το συγκρίνουμε με το τελικό sum,
ενημερώνοντάς το όταν χρειάζεται. Ωστόσο, αυτός ο τρόπος έχει time complexity
O(n²) και δεν θεωρείται optimal.

Για να περάσουμε το array μόνο μία φορά, χρειαζόμαστε κάτι σαν base case, όπου
κάποια στοιχεία θεωρούνται θετικά σε σχέση με αυτό και κάποια αρνητικά. Προφανώς,
αφού ψάχνουμε το μεγαλύτερο άθροισμα, όλοι οι θετικοί αριθμοί συνεισφέρουν σε αυτό,
ενώ οι αρνητικοί το μειώνουν.

Ξεκινάμε να προσθέτουμε όλους τους αριθμούς από την αρχή, και όταν δούμε ότι το sum
που έχουμε μαζέψει μέχρι στιγμής είναι αρνητικό, τότε "κόβουμε" το array που
κάνουμε iterate σε subarrays, μηδενίζουμε το sum και ξεκινάμε να μετράμε από την αρχή
ένα καινούργιο sum.

Έτσι, το αρχικό array το κόβουμε σε επιμέρους κομμάτια και, καθ’ όλη τη διαδικασία,
τσεκάρουμε το currSum με το maxSum και το ενημερώνουμε όταν currSum > maxSum.

Αν όλοι οι αριθμοί είναι αρνητικοί στο αρχικό array, τότε επιστρέφουμε ένα στοιχείο
στο subArray, τον μικρότερο αρνητικό αριθμό (πιο κοντά στο 0). Αν είναι όλοι θετικοί,
τότε επιστρέφουμε όλο το αρχικό array.

Αν χρησιμοποιούμε ένα subArray για να κρατάμε τα στοιχεία και το αντιγράφουμε στο
finalSubArray, όταν αντιγράφουμε και το currSum στο maxSum, τότε η πολυπλοκότητα χρόνου
θα ήταν πάλι O(n²) (στο worst case). Γι’ αυτό, κρατάμε indexes που δείχνουν πού αρχίζει
και πού τελειώνει το κάθε subArray, τα οποία κάνουμε update και όταν ολοκληρώσουμε το pass,
φτιάχνουμε το τελικό array με τα indexes και το επιστρέφουμε.